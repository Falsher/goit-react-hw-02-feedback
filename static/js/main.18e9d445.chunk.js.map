{"version":3,"sources":["components/coffe/controlReview.js","components/coffe/reviewsInfo.js","components/coffe/notificationReviews.js","components/coffe/review.js","App.js","reportWebVitals.js","index.js"],"names":["ControlReview","onIncrementGood","onIncrementNeutral","onIncrementBad","className","type","onClick","ReviewsInfo","stateGood","stateNeutral","stateBad","countTotalFeedback","countPositiveFeedbackPercentage","Notification","this","props","message","Component","defaultProps","ReviewCoffe","state","good","initial","neutral","bad","handlIncrementGood","setState","prevState","handlIncrementNeutral","handlIncrementBad","Math","round","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAqBeA,EAnBO,SAAC,GAAD,IACpBC,EADoB,EACpBA,gBACAC,EAFoB,EAEpBA,mBACAC,EAHoB,EAGpBA,eAHoB,OAKpB,yBAASC,UAAU,kBAAnB,SACE,sBAAKA,UAAU,oBAAf,UACE,wBAAQC,KAAK,SAASD,UAAU,SAASE,QAASL,EAAlD,kBAGA,wBAAQI,KAAK,SAASD,UAAU,SAASE,QAASJ,EAAlD,qBAGA,wBAAQG,KAAK,SAASD,UAAU,SAASE,QAASH,EAAlD,uBCOSI,G,MApBK,SAAC,GAAD,IAClBC,EADkB,EAClBA,UACAC,EAFkB,EAElBA,aACAC,EAHkB,EAGlBA,SACAC,EAJkB,EAIlBA,mBACAC,EALkB,EAKlBA,gCALkB,OAOlB,yBAASR,UAAU,aAAnB,SACE,sBAAKA,UAAU,SAAf,UACE,uBAAMA,UAAU,oBAAhB,kBAA0CI,KAC1C,uBAAMJ,UAAU,uBAAhB,qBAAgDK,KAEhD,uBAAML,UAAU,mBAAhB,iBAAwCM,KACxC,uBAAMN,UAAU,qBAAhB,mBAA4CO,KAC5C,uBAAMP,UAAU,wBAAhB,+BACqBQ,EADrB,cCbAC,E,4JAQJ,WACE,OAAO,4BAAIC,KAAKC,MAAMC,c,GATCC,aAArBJ,EACGK,aAAe,CACpBF,QAAS,IAWEH,QCZTM,E,4MAIJC,MAAQ,CACNC,KAAM,EAAKN,MAAMO,QACjBC,QAAS,EAAKR,MAAMO,QACpBE,IAAK,EAAKT,MAAMO,S,EAElBG,mBAAqB,WACnB,EAAKC,UAAS,SAAAC,GACZ,MAAO,CACLN,KAAMM,EAAUN,KAAO,O,EAI7BO,sBAAwB,WACtB,EAAKF,UAAS,SAAAC,GACZ,MAAO,CACLJ,QAASI,EAAUJ,QAAU,O,EAInCM,kBAAoB,WAClB,EAAKH,UAAS,SAAAC,GACZ,MAAO,CACLH,IAAKG,EAAUH,IAAM,O,4CAK3B,WACE,IAAMb,EACJG,KAAKM,MAAMC,KAAOP,KAAKM,MAAMG,QAAUT,KAAKM,MAAMI,IAC9CZ,EAAkCkB,KAAKC,MAC1CjB,KAAKM,MAAMC,KAAOV,EAAsB,KAG3C,OACE,sBAAKP,UAAU,UAAf,UACE,cAAC,EAAD,CACEH,gBAAiBa,KAAKW,mBACtBvB,mBAAoBY,KAAKc,sBACzBzB,eAAgBW,KAAKe,oBAEtBlB,EAAqB,EACpB,cAAC,EAAD,CACEH,UAAWM,KAAKM,MAAMC,KACtBZ,aAAcK,KAAKM,MAAMG,QACzBb,SAAUI,KAAKM,MAAMI,IACrBb,mBAAoBA,EACpBC,gCAAiCA,IAGnC,cAAC,EAAD,CAAcI,QAAQ,6B,GAtDNC,aAApBE,EACGD,aAAe,CACpBI,QAAS,GA0DEH,QCpDAa,EARH,kBACV,mCACE,0BAAS5B,UAAU,QAAnB,UACE,4CACA,cAAC,EAAD,CAASkB,QAAS,UCITW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.18e9d445.chunk.js","sourcesContent":["import React from 'react';\nimport './css/controlReview.css';\nconst ControlReview = ({\n  onIncrementGood,\n  onIncrementNeutral,\n  onIncrementBad,\n}) => (\n  <section className=\"FeedbackOptions\">\n    <div className=\"Counter__controls\">\n      <button type=\"button\" className=\"button\" onClick={onIncrementGood}>\n        Good\n      </button>\n      <button type=\"button\" className=\"button\" onClick={onIncrementNeutral}>\n        Neutral\n      </button>\n      <button type=\"button\" className=\"button\" onClick={onIncrementBad}>\n        Bad\n      </button>\n    </div>\n  </section>\n);\nexport default ControlReview;\n","import React from 'react';\nimport './css/reviewsInfo.css';\nconst ReviewsInfo = ({\n  stateGood,\n  stateNeutral,\n  stateBad,\n  countTotalFeedback,\n  countPositiveFeedbackPercentage,\n}) => (\n  <section className=\"Statistics\">\n    <div className=\"Review\">\n      <span className=\"Review__goodValue\">Good:{stateGood}</span>\n      <span className=\"Review__neutralValue\">Neutral:{stateNeutral}</span>\n\n      <span className=\"Review__badValue\">Bad:{stateBad}</span>\n      <span className=\"Review__totalValue\">Total:{countTotalFeedback}</span>\n      <span className=\"Review__feedbackValue\">\n        Positive feedback:{countPositiveFeedbackPercentage}%\n      </span>\n    </div>\n  </section>\n);\nexport default ReviewsInfo;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Notification extends Component {\n  static defaultProps = {\n    message: '',\n  };\n  static propTypes = {\n    message: PropTypes.string,\n  };\n\n  render() {\n    return <p>{this.props.message}</p>;\n  }\n}\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport ConrolReview from './controlReview';\nimport ReviewsInfo from './reviewsInfo';\nimport Notification from './notificationReviews';\nclass ReviewCoffe extends Component {\n  static defaultProps = {\n    initial: 0,\n  };\n  state = {\n    good: this.props.initial,\n    neutral: this.props.initial,\n    bad: this.props.initial,\n  };\n  handlIncrementGood = () => {\n    this.setState(prevState => {\n      return {\n        good: prevState.good + 1,\n      };\n    });\n  };\n  handlIncrementNeutral = () => {\n    this.setState(prevState => {\n      return {\n        neutral: prevState.neutral + 1,\n      };\n    });\n  };\n  handlIncrementBad = () => {\n    this.setState(prevState => {\n      return {\n        bad: prevState.bad + 1,\n      };\n    });\n  };\n\n  render() {\n    const countTotalFeedback =\n      this.state.good + this.state.neutral + this.state.bad;\n    const countPositiveFeedbackPercentage = Math.round(\n      (this.state.good / countTotalFeedback) * 100,\n    );\n\n    return (\n      <div className=\"Counter\">\n        <ConrolReview\n          onIncrementGood={this.handlIncrementGood}\n          onIncrementNeutral={this.handlIncrementNeutral}\n          onIncrementBad={this.handlIncrementBad}\n        />\n        {countTotalFeedback > 0 ? (\n          <ReviewsInfo\n            stateGood={this.state.good}\n            stateNeutral={this.state.neutral}\n            stateBad={this.state.bad}\n            countTotalFeedback={countTotalFeedback}\n            countPositiveFeedbackPercentage={countPositiveFeedbackPercentage}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </div>\n    );\n  }\n}\nexport default ReviewCoffe;\n","import React from 'react';\n\nimport Counter from './components/coffe/review';\n\nconst App = () => (\n  <>\n    <section className=\"title\">\n      <h1>Statistics</h1>\n      <Counter initial={0} />\n    </section>\n  </>\n);\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}